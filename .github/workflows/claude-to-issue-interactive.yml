name: Claude Analysis to Issue (Interactive)

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  process-claude-analysis:
    if: |
      github.event.issue.pull_request && 
      github.event.comment.user.login == 'claude[bot]' &&
      (contains(github.event.comment.body, '❌') || 
       contains(github.event.comment.body, '⚠️') ||
       contains(github.event.comment.body, 'Issues'))
    
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    
    steps:
      - name: Extract and create interactive prompt
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body;
            const issues = [];
            
            // 問題を抽出
            const errorMatches = comment.match(/❌\s*([^\n]+)/g) || [];
            errorMatches.forEach((match, i) => {
              issues.push({
                id: `error-${i}`,
                type: 'error',
                priority: 'high',
                emoji: '🔴',
                content: match.replace(/❌\s*/, '').trim()
              });
            });
            
            const warningMatches = comment.match(/⚠️\s*([^\n]+)/g) || [];
            warningMatches.forEach((match, i) => {
              issues.push({
                id: `warning-${i}`,
                type: 'warning',
                priority: 'medium',
                emoji: '🟡',
                content: match.replace(/⚠️\s*/, '').trim()
              });
            });
            
            // Architecture Issues セクションの抽出
            const archMatch = comment.match(/## Architecture Issues([\s\S]*?)(?=\n## |$)/);
            if (archMatch) {
              const archContent = archMatch[1].trim();
              if (archContent) {
                issues.push({
                  id: 'architecture-1',
                  type: 'architecture',
                  priority: 'high',
                  emoji: '🏗️',
                  content: 'Architecture Issues detected'
                });
              }
            }
            
            // High Priority Issues セクションの抽出
            const highPriorityMatch = comment.match(/## High Priority Issues([\s\S]*?)(?=\n## |$)/);
            if (highPriorityMatch) {
              const highContent = highPriorityMatch[1].trim();
              if (highContent) {
                issues.push({
                  id: 'high-priority-1',
                  type: 'high-priority',
                  priority: 'high',
                  emoji: '🚨',
                  content: 'High Priority Issues detected'
                });
              }
            }
            
            if (issues.length === 0) return;
            
            // インタラクティブなコメントを作成
            const interactiveComment = `## 🤖 Claude検出の問題 → Issue作成

以下の問題が検出されました。**作成したい項目にチェック**を入れてください：

${issues.map((issue, i) => 
  `- [ ] ${issue.emoji} **[${issue.priority.toUpperCase()}]** ${issue.content}`
).join('\n')}

### 📋 使い方

1. 上記のチェックボックスで作成したい項目を選択
2. このコメントに以下のリアクションを追加：
   - 🚀 **選択した項目でissue作成**
   - 📦 **すべてを1つのissueにまとめて作成**
   - 🏷️ **ラベルを追加して作成**（その後コメントでラベル指定）

### ⚙️ オプション

<details>
<summary>高度なオプション</summary>

コメントで以下の形式で追加指定も可能：
\`\`\`
@claude-issue-bot
labels: bug, high-priority
assignee: @username
milestone: v1.0
project: "Sprint 2024-Q1"
\`\`\`
</details>

---
_Issue作成ID: ${context.payload.comment.id}_`;
            
            const result = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: interactiveComment
            });
            
            // メタデータを保存（後続処理用）
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `<!-- claude-issue-metadata:${Buffer.from(JSON.stringify({
                commentId: result.data.id,
                issues: issues,
                sourceCommentId: context.payload.comment.id
              })).toString('base64')} -->`
            });

  monitor-and-process-reactions:
    if: |
      github.event_name == 'issue_comment' &&
      github.event.action == 'created' &&
      contains(github.event.comment.body, 'Claude検出の問題 → Issue作成')
    
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    
    steps:
      - name: Wait and process reactions
        uses: actions/github-script@v7
        with:
          script: |
            const commentId = context.payload.comment.id;
            const maxAttempts = 10;
            const checkInterval = 30000; // 30秒
            
            // リアクションを監視
            for (let i = 0; i < maxAttempts; i++) {
              await new Promise(resolve => setTimeout(resolve, checkInterval));
              
              const reactions = await github.rest.reactions.listForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId
              });
              
              const rocketReaction = reactions.data.find(r => 
                r.content === 'rocket' && r.user.login !== 'github-actions[bot]'
              );
              
              const packageReaction = reactions.data.find(r => 
                r.content === 'package' && r.user.login !== 'github-actions[bot]'
              );
              
              const labelReaction = reactions.data.find(r => 
                r.content === 'label' && r.user.login !== 'github-actions[bot]'
              );
              
              if (rocketReaction || packageReaction || labelReaction) {
                // コメントを取得して選択状態を解析
                const comment = await github.rest.issues.getComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: commentId
                });
                
                // チェックボックスの状態を解析
                const lines = comment.data.body.split('\n');
                const selectedItems = [];
                const issuePattern = /- \[([ x])\] (.+)/;
                
                lines.forEach(line => {
                  const match = line.match(issuePattern);
                  if (match && match[1] === 'x') {
                    selectedItems.push({
                      raw: match[2],
                      content: match[2].replace(/^[🔴🟡🏗️🚨]\s*\*\*\[.+?\]\*\*\s*/, '').trim()
                    });
                  }
                });
                
                // メタデータコメントを検索
                const comments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number
                });
                
                const metadataComment = comments.data.find(c => 
                  c.body.includes('<!-- claude-issue-metadata:')
                );
                
                let metadata = null;
                if (metadataComment) {
                  const metadataMatch = metadataComment.body.match(/<!-- claude-issue-metadata:(.+?) -->/);
                  if (metadataMatch) {
                    metadata = JSON.parse(Buffer.from(metadataMatch[1], 'base64').toString());
                  }
                }
                
                // Issue作成処理
                const createdIssues = [];
                
                if (rocketReaction && selectedItems.length > 0) {
                  // 個別にissue作成
                  for (const item of selectedItems) {
                    const issueTitle = item.content.length > 60 
                      ? `${item.content.substring(0, 60)}...`
                      : item.content;
                    
                    const issueBody = `## 概要
${item.content}

## コンテキスト
- 検出元: PR #${context.issue.number} - https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${context.issue.number}
- 検出者: Claude Code Action
- 検出日時: ${new Date().toISOString()}
- 元コメント: ${comment.data.html_url}

## 対応方針
TODO: 対応方針を記載

---
_このissueはClaude Code Actionの分析結果から自動生成されました_`;
                    
                    try {
                      const created = await github.rest.issues.create({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        title: `[Claude] ${issueTitle}`,
                        body: issueBody,
                        labels: ['claude-detected', 'auto-generated']
                      });
                      
                      createdIssues.push(created.data);
                    } catch (error) {
                      console.error('Failed to create issue:', error);
                    }
                  }
                  
                } else if (packageReaction) {
                  // すべてを1つのissueにまとめる
                  const allItems = selectedItems.length > 0 ? selectedItems : 
                    lines.filter(line => line.match(/- \[ \] (.+)/))
                          .map(line => ({ content: line.match(/- \[ \] (.+)/)[1] }));
                  
                  if (allItems.length > 0) {
                    const bundledTitle = `[Claude] ${allItems.length}件の問題検出 (PR #${context.issue.number})`;
                    const bundledBody = `## 検出された問題

${allItems.map((item, i) => `### ${i + 1}. ${item.content}

---`).join('\n\n')}

## コンテキスト
- PR: #${context.issue.number} - https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${context.issue.number}
- 検出日時: ${new Date().toISOString()}
- 検出者: Claude Code Action

## 対応方針
TODO: 各項目に対する対応方針を記載

---
_このissueはClaude Code Actionの分析結果から自動生成されました_`;
                    
                    try {
                      const created = await github.rest.issues.create({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        title: bundledTitle,
                        body: bundledBody,
                        labels: ['claude-detected', 'bundled', 'auto-generated']
                      });
                      
                      createdIssues.push(created.data);
                    } catch (error) {
                      console.error('Failed to create bundled issue:', error);
                    }
                  }
                }
                
                // 結果をコメント
                if (createdIssues.length > 0) {
                  const resultComment = `✅ **Issue作成完了！**

${createdIssues.map(issue => `- [#${issue.number}](${issue.html_url}): ${issue.title}`).join('\n')}

_${createdIssues.length}件のissueが作成されました_`;
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: resultComment
                  });
                } else {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: '❌ Issue作成に失敗しました。チェックボックスが選択されているか確認してください。'
                  });
                }
                
                break; // リアクション処理完了
              }
            }

  # 直接コマンド処理（従来の/create-issueコマンド対応）
  create-issues-from-command:
    if: |
      github.event.issue.pull_request && 
      (startsWith(github.event.comment.body, '/create-issues') ||
       startsWith(github.event.comment.body, '/create-issue'))
    
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: read
      contents: read
    
    steps:
      - name: Parse command and create issues
        uses: actions/github-script@v7
        with:
          script: |
            const command = context.payload.comment.body;
            
            // コマンドパース
            const createMatch = command.match(/\/create-issues?\s*(.*)/);
            if (!createMatch) return;
            
            const args = createMatch[1] || '';
            const lines = args.split('\n');
            const title = lines[0] || `Issue from PR #${context.issue.number}`;
            const body = lines.slice(1).join('\n') || 'Issue created from PR comment';
            
            // オプション解析
            const labelMatch = command.match(/--label[s]?="?([^"\s]+)"?/);
            const assignMatch = command.match(/--assign="?([^"\s]+)"?/);
            
            const extraLabels = labelMatch ? labelMatch[1].split(',') : [];
            const assignee = assignMatch ? assignMatch[1].replace('@', '') : null;
            
            // Issue作成
            try {
              const labels = ['claude-detected', 'manual'].concat(extraLabels);
              
              const issueData = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: `## 概要
${body}

## コンテキスト
- 作成元: PR #${context.issue.number} - https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${context.issue.number}
- 作成者: @${context.payload.comment.user.login}
- 作成日時: ${new Date().toISOString()}

---
_このissueは手動コマンドから作成されました_`,
                labels: labels.filter(Boolean)
              };
              
              if (assignee) issueData.assignees = [assignee];
              
              const created = await github.rest.issues.create(issueData);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `✅ Issue作成完了: [#${created.data.number}](${created.data.html_url}) - ${created.data.title}`
              });
              
            } catch (error) {
              console.error('Failed to create issue:', error);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '❌ Issue作成に失敗しました。エラーログを確認してください。'
              });
            }